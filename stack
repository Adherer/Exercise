题目描述：
第九集，离间计
TimeLimit:1000MS  MemoryLimit:128MB
64-bit integer IO format:%I64d
Problem Description
  拥有了超强的体能和跑步速度后,小A的信心极度膨胀。正当他准备潜入特工们的聚会地点套取情报的时候,小A发现组织的守卫非常严密,根本没有漏洞
可钻。最后小A只得返回宾馆同小C商量。通过小C,小A知道了特工组织内有着严谨的等级排名制度,然而这等级并不是严格按照能力来排的,但可怜的特工
们并不全都知道。聪明的小A立马想到了离间计,即通过某种方式告知每个特工那些排名比他高但能力比他低的人,刺激低等级的特工去试探高等级的特工,
让他们明白后从而引起内乱，但又担心排名相距太大，低排名的特工会因畏惧而连基本的试探也不敢去,毕竟低等级的特工长期处在高等级的特工的淫威
下嘛。(不明白小A为什么会知道该组织内部的等阶排名吗？因为小C曾是该组织的内部高层人员…)

现在给出一个序列，序列中的第i个值表示排名为i的特工的能力值，要求求出每个特工的排名前面第一个比他的能力值小的特工的排名,
最高排名从0开始,如果不存在，则输出-1

在成功的离间了部分的特工，小A才能更加容易的潜入特工中获取情报、



Input
多组测试数据。

第一行输入一个整数n(0<n<=100000)

接下来有n个数ai(0<=ai<=1000000).ai表示排名为i的员工的能力值（0<=i<n）。


Output
输出n个数，分别表示每个排名为i（0<=i<n）的特工排在其前面且能力值小于他的特工的排名.



SampleInput
1
5
5
1 2 3 4 5



SampleOutput
-1
-1 0 1 2 3

解析：
  这是我们学校校赛的第九题，也是属于简单题系列的，很显然，从题目的信息里我们可以看出，题目就是维护一个单调递增的单调栈，当前考虑到的
数字如果小于等于栈顶元素的话，那么栈顶元素出栈，重复该过程，直到栈顶元素小于我当前考虑到的元素(即扩展完毕)。
  然后这道题有个小trick，由于数据都是大于等于0的，那么我们可以一开始就压入一个元素，其值为-1，id也为-1.这样的话如果当前元素拓展到了栈
的底部，那么很显然在它前面没有比它小的元素，自然就输出-1了。

完整代码实现：

````
#include<cstdio>
#include<stack>
using namespace std;
const int MAX_N = (int)1e5 + 10;
typedef struct node Node;
struct node{
    int value;
    int id;
};
int ans[MAX_N];
void solve(){
    int n,x;
    while(scanf("%d",&n)==1){
        stack <Node> s;
        Node tmp;
        tmp.value = -1;
        tmp.id = -1;
        s.push(tmp);
        for(int i = 0;i < n;++i){
            scanf("%d",&x);
            while(x <= s.top().value){
                s.pop();
            }

            tmp.value = x;
            tmp.id = i;
            ans[i] = s.top().id;
            s.push(tmp);
        }

        for(int i = 0;i < n;++i){
            if(i){
                printf(" %d",ans[i]);
            }
            else{
                printf("%d",ans[i]);
            }
        }
        printf("\n");
    }
}
int main(){
    solve();
    return 0;
}

````
